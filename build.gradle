buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

plugins {
    id 'application'
    id 'findbugs'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'pmd'
    id 'com.github.kt3k.coveralls' version '2.0.1'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.2'
}


project.description = project_description
project.version = '1.2-RELEASE'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.pi4j', name: 'pi4j-core', version: '0.0.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.1'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

mainClassName = 'de.freitag.stefan.lcd.demo.RaspiLCDDemo'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    exclude('log4j2.xml')
    manifest {
        attributes 'Implementation-Title': project_description,
                'Implementation-Version': version,
                'Implementation-Vendor': 'Stefan Freitag',
                'Created-By': System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}


def pomConfig = {
    inceptionYear '2014'

    licenses {
        license {
            name "The MIT License (MIT)"
            url "https://github.com/stefanfreitag/RaspiLcd/blob/master/LICENSE"
            distribution "repo"
        }
    }

    scm {
        connection scm_connection
        developerConnection scm_developer_connection
        url scm_url
    }
    developers {
        developer {
            id "sfreitag"
            name "Stefan Freitag"
            email "stefan@stefreitag.de"
            timezone "Europe/Berlin"
            roles {
                role "developer"
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            artifact distZip

            groupId 'de.freitag.stefan'
            artifactId 'raspilcd'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Java Library for accessing the RaspiLcd hardware')
                root.children().last() + pomConfig
            }
        }
    }
}

bintrayUpload.dependsOn(build)

bintray {
    if (!project.hasProperty('bintray_user')) {
        project.ext.bintray_user = 'default'
    }
    if (!project.hasProperty('bintray_api_key')) {
        project.ext.bintray_api_key = 'default'
    }

    user = "$bintray_user"
    key = "$bintray_api_key"
    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'RaspiLcd'
        desc = 'Java Library for accessing the RaspiLcd hardware.'
        websiteUrl = 'https://github.com/stefanfreitag/ RaspiLcd/'
        issueTrackerUrl = 'https://github.com/stefanfreitag/RaspiLcd/issues'
        vcsUrl = 'git://github.com/stefanfreitag/RaspiLcd.git'
        licenses = ['MIT']
        labels = []
        publicDownloadNumbers = true
        version {
            name = project.version
            vcsTag = project.version
            gpg {
                sign = true
                passphrase = project.hasProperty('gpg_passphrase') ? gpg_passphrase : ''
            }
        }
    }
}

javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
}

findbugs {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

pmd {
    ignoreFailures = true
    sourceSets = [sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
            "java-basic",
            "java-braces",
            "java-design",
            "java-finalizers",
            "java-naming",
            "java-optimizations",
            "java-strings",
    ]
}
